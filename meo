import cv2
import numpy as np
from motpy import Detection, MultiObjectTracker
import logging
import datetime
import os

# Tạo thư mục logs nếu chưa tồn tại
if not os.path.exists('logs'):
    os.makedirs('logs')

# Cấu hình logging
log_filename = f'logs/tracking_{datetime.datetime.now().strftime("%Y%m%d_%H%M%S")}.log'
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.FileHandler(log_filename), logging.StreamHandler()]
)

# Khởi tạo tracker
tracker = MultiObjectTracker(
    dt=0.1,
    model_spec={
        'order_pos': 1,
        'dim_pos': 2,
        'order_size': 1,
        'dim_size': 2,
    },
    matching_fn_kwargs={'min_iou': 0.2},
    active_tracks_kwargs={'min_steps_alive': 3, 'max_staleness': 5}
)

# Biến đếm
circle_count = 0
rectangle_count = 0
ROI_X = 0.3  # Tỷ lệ trục X của đường ROI (giữa khung hình)
ROI_TOLERANCE = 0.05  # Tỷ lệ dung sai (5% chiều rộng)
counted_tracks = set()

# Hàm tự động cấu hình thông số
def auto_config(frame_width, frame_height):
    min_area = (frame_width * frame_height) // 5000
    gaussian_kernel_size = max(15, frame_width // 128 | 7)
    morph_kernel_size = max(3, frame_width // 256)
    return min_area, gaussian_kernel_size, morph_kernel_size

# Hàm phát hiện hình dạng
def detect_shapes(frame, min_area, gaussian_kernel_size, morph_kernel_size):
    blurred = cv2.GaussianBlur(frame, (gaussian_kernel_size, gaussian_kernel_size), 0)
    gray = cv2.cvtColor(blurred, cv2.COLOR_BGR2GRAY)
    _, binary = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
    kernel = np.ones((morph_kernel_size, morph_kernel_size), np.uint8)
    dilated = cv2.dilate(binary, kernel, iterations=0)
    eroded = cv2.erode(dilated, kernel, iterations=1)

    contours, _ = cv2.findContours(eroded, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    detections = []

    for contour in contours:
        area = cv2.contourArea(contour)
        if area < min_area:
            continue
        x, y, w, h = cv2.boundingRect(contour)
        perimeter = cv2.arcLength(contour, True)
        circularity = 4 * np.pi * area / (perimeter * perimeter) if perimeter > 0 else 0
        approx = cv2.approxPolyDP(contour, 0.03 * perimeter, True)

        if len(approx) == 4:
            shape_type = "rectangle"
        elif 0.7 <= circularity <= 1.2:
            shape_type = "circle"
        else:
            continue

        detection = Detection(
            box=[x, y, x + w, y + h],
            score=1.0,
            class_id=1 if shape_type == "circle" else 2
        )
        detections.append(detection)

    return detections, blurred, eroded

# Hàm chính
def main():
    global circle_count, rectangle_count, counted_tracks

    video_path = "vid1.mp4"
    cap = cv2.VideoCapture(video_path)
    if not cap.isOpened():
        logging.error("Cannot open video file.")
        return

    frame_width = 640  # Đặt chiều rộng cố định
    frame_height = 360  # Đặt chiều cao cố định
    output_width = 960  # Chiều rộng khung hình kết hợp
    output_height = 720  # Chiều cao khung hình kết hợp

    output_file = 'output_video.mp4'
    fourcc = cv2.VideoWriter_fourcc(*'mp4v')
    out = cv2.VideoWriter(output_file, fourcc, 20.0, (output_width, output_height))

    min_area, gaussian_kernel_size, morph_kernel_size = auto_config(frame_width, frame_height)

    frame_count = 0
    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break

        frame_count += 1
        frame_resized = cv2.resize(frame, (frame_width, frame_height))
        detections, blurred, binary = detect_shapes(frame_resized, min_area, gaussian_kernel_size, morph_kernel_size)
        tracker.step(detections=detections)
        active_tracks = tracker.active_tracks()

        tracking_frame = frame_resized.copy()
        roi_x = int(ROI_X * frame_width)
        roi_tolerance = int(ROI_TOLERANCE * frame_width)

        for track in active_tracks:
            x1, y1, x2, y2 = map(int, track.box)
            center_x = (x1 + x2) // 2

            if roi_x - roi_tolerance <= center_x <= roi_x + roi_tolerance:
                if track.id not in counted_tracks:
                    counted_tracks.add(track.id)
                    if track.class_id == 1:
                        circle_count += 1
                        logging.info(f"Circle ID {track.id} counted at frame {frame_count}")
                    elif track.class_id == 2:
                        rectangle_count += 1
                        logging.info(f"Rectangle ID {track.id} counted at frame {frame_count}")

            color = (0, 255, 0) if track.class_id == 1 else (0, 0, 255)
            label = "Circle" if track.class_id == 1 else "Rectangle"
            cv2.rectangle(tracking_frame, (x1, y1), (x2, y2), color, 2)
            cv2.putText(tracking_frame, label, (x1, y1 - 10),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)

        cv2.line(tracking_frame, (roi_x, 0), (roi_x, frame_height), (255, 255, 0), 2)

        # Chuẩn hóa và ghép khung hình
        binary_color = cv2.cvtColor(binary, cv2.COLOR_GRAY2BGR)
        blurred_resized = cv2.resize(blurred, (output_width // 2, output_height // 2))
        binary_resized = cv2.resize(binary_color, (output_width // 2, output_height // 2))
        tracking_resized = cv2.resize(tracking_frame, (output_width // 2, output_height // 2))
        frame_resized = cv2.resize(frame_resized, (output_width // 2, output_height // 2))

        top_row = cv2.hconcat([blurred_resized, binary_resized])
        bottom_row = cv2.hconcat([tracking_resized, frame_resized])
        combined_frame = cv2.vconcat([top_row, bottom_row])
                # Hiển thị số lượng hình tròn và hình vuông trên video
        cv2.putText(combined_frame, f"Circles: {circle_count}", (10, 30), 
                    cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
        cv2.putText(combined_frame, f"Rectangles: {rectangle_count}", (10, 60), 
                    cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)


        # Ghi vào video và hiển thị
        out.write(combined_frame)
        cv2.imshow("Tracking with ROI", combined_frame)

        if cv2.waitKey(20) & 0xFF == ord('q'):
            break

    cap.release()
    out.release()
    cv2.destroyAllWindows()
    logging.info("Resources released, application finished.")
if __name__ == "__main__":
    main()
    

